#!/usr/bin/env node
//IP config import
const config = require('../public/javascripts/config');

//Module dependencies.
var app = require('../app');
var debug = require('debug')('textexpress:server');

//Get port from environment and store in Express.
var port = normalizePort(process.env.PORT || config.ipSettings.httpPort);
app.set('port', port);

//for time stuff
var strftime = require('strftime');

//For logging
var logging = require('py-logging');
require('py-logging/nodekit').install(logging);

var strftimePST = strftime.timezone(-480);
date_strftime_format = '%d-%b-%y %I:%M:%S %p';
message_format = "%(asctime) - %(levelname) - %(message)";

logging.basicConfig({ filename: 'gpgLog.log', 
	format: message_format,
	timeFormat: strftimePST(date_strftime_format),
	level: 'DEBUG'});

//For node fetch (server-side)
const fetch = require('node-fetch');
let url = "http://"+ config.ipSettings.IP + ":"+ config.ipSettings.expressPort + "/game";

//Create HTTP server.
//Library imports(http, express, websocket)
const http = require('http');
const websocketServer = require("websocket").server
var path = require('path');
const stateMac = require('../public/javascripts/stateMachine');


//Express Start
//handled in app.js

//HTTP server start
const httpServer = http.createServer(app);
httpServer.listen(
    config.ipSettings.httpPort,
    config.ipSettings.IP,
    () => console.log("Http on: "+ config.ipSettings.httpPort),
);
httpServer.on('error', onError);
httpServer.on('listening', onListening);

//Variables
var pId = 1;
//Objects for games and players used with their IDs as index
const players = {};
const games = {};

// Include for function to create random and unique game id 
var createId = require('../public/javascripts/createId');

// Turn Http into WebSocket
const wsServer = new websocketServer({
	"httpServer": httpServer,
});

//Run Websocket
wsServer.on("request", request => {
	var playerId = pId;
	pId++;


	//Binding TCP to connection
	const connection = request.accept(null, request.origin);

	connection.on("close", () => {
		//console.log("PlayerID: " + playerId + " disconnected.")
	});
    
	// receive message from the client here
	connection.on("message", message => {
	//Converts JSON message from the browser into javascript object using parse() method
	const result = JSON.parse(message.utf8Data)
	if (result.method === "host"){
		
		// Generate unique game ID 
		const gameId = createId.createId(Object.keys(games));
		games[gameId] = {
			"id": gameId,
			"players": [],
			"boardState": result.boardState,
			"chatLog": [],
		}
		
		getIPFromAmazonHost(gameId);

		
		const gameData = {
			"method": "startGame",
			"id": gameId,
			"game": games[gameId]
		}
		
		
		let addToGame = 1;
		
		const game = games[gameId];
		
		const gameID = { gameID: gameId };
		
		fetch(url, {
			method: 'POST',
			headers: { 'Content-Type': 'application/json',},
			body: JSON.stringify({gameID, "addDelete":addToGame}),
		})
		.then(response => response.json())
		.then(gameID => {
		})
		.catch((error) => {
		});


		connection.send(JSON.stringify(gameData));
		//players[playerId].connection.send(JSON.stringify(gameData));
	}
	if (result.method === "join") {
		var username = result.username;
		playerId = result.playerId;
		players[playerId].username = username;
		const gameId = result.gameId;
		
		getIPFromAmazonPlayer(playerId, username, gameId);

		if(!games[gameId]) return;

		//Data sent to player to set up game
		const joinData = {
			"method": "join",
			"boardState": games[gameId].boardState,
			"chatLog": games[gameId].chatLog,
			"id": gameId,
		}
		//start game
		broadcastState();
		players[playerId].connection.send(JSON.stringify(joinData));		
		//Announce new connections
		let chatMessage = players[playerId].username + " has joined.";
		games[gameId].chatLog.push(chatMessage);
		const gameData = {
			"method": "updateChat",
			"chatMessage": chatMessage
		}
		games[gameId].players.push({
			"playerId": playerId
		});
		games[gameId].players.forEach( p => {
			players[p.playerId].connection.send(JSON.stringify(gameData));
		}) 
	}	
				
	//Play game server logic
	if (result.method === "play") {
		//Itterates over the cards on the board, sends them to the statemachine to see
		//if action is permittable, if not it revertse change to old state.
		if(games[result.gameId] === undefined)
			return;
		if (stateMac.dieCheck(result.boardState, games[result.gameId].boardState))
			return;
		playerId = result.playerId;
		const gameId = result.gameId;
		let chatMessage = null;
		let oldBoardState = games[gameId].boardState;
		let newBoardState = result.boardState;
		// Update log when a player makes a move
		// These for loops iterate over previous boardstate and compare it
		// to new boardstate to log specific changes.
		for(let i = 0; i < oldBoardState.length; ++i) {
			let oldMove = oldBoardState[i].moveMade;
			let newMove = newBoardState[i].moveMade;
			if(oldMove !== newMove) {
				chatMessage = players[playerId].username + " " + newMove;
			}					
		}
		games[gameId].boardState = result.boardState;
		if(chatMessage !== null) {
			games[gameId].chatLog.push(chatMessage);
			const gameData = {
				"method": "updateChat",
				"chatMessage": chatMessage
			}
			games[gameId].players.forEach( p => {
				players[p.playerId].connection.send(JSON.stringify(gameData));
			})
		}
	}

	// Send game information to player for download
	if(result.method == "download") {
		const gameId = result.gameId;
		playerId = result.playerId;
		const gameData = {
			"method": "download",
			"chatLog": games[gameId].chatLog
		}
		const con = players[playerId].connection;
		con.send(JSON.stringify(gameData));
	}

	// Update logs when someone types a message
	if(result.method === 'chat') {
		let gameId = result.gameId;
		let playerId = result.playerId;
		let chatMessage = result.chatMessage;
		chatMessage = players[playerId].username + ": " + chatMessage;
		games[gameId].chatLog.push(chatMessage);
		const gameData = {
			"method": "updateChat",
			"chatMessage": chatMessage
		}
		games[gameId].players.forEach( p => {
			players[p.playerId].connection.send(JSON.stringify(gameData));
		})
	}

	if (result.method === "exit") {
		const gameId = result.gameId;
		const playerId = result.playerId;
		
		if (players[playerId] === undefined)
			return;

		getIPFromAmazonPlayerExit(playerId, gameId);
		
		if (games[gameId] !== null && games[gameId] !== undefined) {
			for (let i = 0; i < games[gameId].players.length; i++){ 
				if (games[gameId].players[i].playerId === playerId) { 
					games[gameId].players.splice(i, 1); 
				}
			}
			if (games[gameId].players.length !== 0) {
				let chatMessage = players[playerId].username + " has left the game.";
				games[gameId].chatLog.push(chatMessage);
				const gameData = {
					"method": "updateChat",
					"chatMessage": chatMessage,
					"id": gameId
				}
				games[gameId].players.forEach( p => {
					players[p.playerId].connection.send(JSON.stringify(gameData));
				})
			}
			else {	
				const gameData = {
						"method": "end",
						"id": gameId
					}
				
			
					
				const gameNum = gameId;
				
				const gameID = { gameID: gameNum };
				let addToGame = 99;
				
				fetch(url, {
					method: 'POST',
					headers: { 'Content-Type': 'application/json',},
					body: JSON.stringify({gameID, "addDelete":addToGame}),
				})
				.then(response => response.json())
				.then(gameID => {
				})
				.catch((error) => {
				});		
				
					//Send game id back to webpage
					connection.send(JSON.stringify(gameData));		
					
					delete games[gameId];
			}
		}

	} 
});

players[playerId] = {
	"connection": connection
}

// data pack sent to player
const gameData = {
	"method": "connect",
	"playerId": playerId
}

//pack up gameData to JSON string
connection.send(JSON.stringify(gameData))

})



//Broadcasting function, broadcasts the gamestate to all players
function broadcastState(){

	for (const g of Object.keys(games)) {
		//update gamestate
		const game = games[g]

			const gameData = {
				"method": "update",
				"game": game
			}
		//Send updated game to all players
		game.players.forEach( p => {
				players[p.playerId].connection.send(JSON.stringify(gameData));
				})
	}

	setTimeout(broadcastState, 500);

}

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
	var port = parseInt(val, 10);

	if (isNaN(port)) {
		// named pipe
		return val;
	}

	if (port >= 0) {
		// port number
		return port;
	}

	return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
	if (error.syscall !== 'listen') {
		throw error;
	}

	var bind = typeof port === 'string'
		? 'Pipe ' + port
		: 'Port ' + port;

	// handle specific listen errors with friendly messages
	switch (error.code) {
		case 'EACCES':
			console.error(bind + ' requires elevated privileges');
			process.exit(1);
			break;
		case 'EADDRINUSE':
			console.error(bind + ' is already in use');
			process.exit(1);
			break;
		default:
			throw error;
	}
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
	var addr = httpServer.address();
	var bind = typeof addr === 'string'
		? 'pipe ' + addr
		: 'port ' + addr.port;
	debug('Listening on ' + bind);
}

//Get IP address from AWS when player starts
function getIPFromAmazonPlayer(playerId, username, gameId){
	fetch("https://checkip.amazonaws.com/")
	.then(res => res.text()).then(data => {logging.info('Player ' + playerId + ' named ' + username + ' in game ' + gameId + ' joining with IP address: ' + (data = data.replace(/(\r\n|\n|\r)/gm,"")))});
}

//Get IP address from AWS when player starts
function getIPFromAmazonPlayerExit(playerId, gameId){
	fetch("https://checkip.amazonaws.com/")
	.then(res => res.text()).then(data => {logging.info('Player ' + playerId + ' in game ' + gameId + ' exiting with IP address: ' + (data = data.replace(/(\r\n|\n|\r)/gm,"")))});
}


//Get IP address from AWS when host joins
function getIPFromAmazonHost(gameId){
	fetch("https://checkip.amazonaws.com/")
	.then(res => res.text()).then(data => {logging.info('Host with game ' + gameId + ' has IP address: ' + (data = data.replace(/(\r\n|\n|\r)/gm,"")))});
}


